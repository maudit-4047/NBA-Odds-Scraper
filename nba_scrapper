from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
from datetime import datetime, timedelta
import time

# Setup Chrome options
chrome_options = Options()
chrome_options.add_argument('--headless')  # Run without GUI
chrome_options.add_argument('--disable-gpu')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')

# Path to your chromedriver
service = Service('path to /chromedriver.exe')

# Initialize WebDriver
driver = webdriver.Chrome(service=service, options=chrome_options)
wait = WebDriverWait(driver, 15)

# URL for Flashscore NBA results
url = 'https://www.flashscore.com.au/basketball/usa/nba/results/'
driver.get(url)
time.sleep(10)

# Accept cookies if prompted
try:
    accept_cookies = driver.find_element(By.CLASS_NAME, 'cookie__button')
    accept_cookies.click()
    time.sleep(2)
except:
    pass

# Scroll down to load more results
for _ in range(5):
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    time.sleep(5)

# Fetch match elements
matches = driver.find_elements(By.XPATH, '//div[contains(@class, "event__match event__match--static event__match--oneLine") or contains(@class, "event__match event__match--static event__match--twoLine")]')
print(f"Total matches found: {len(matches)}\n")

data = []

# Loop through matches to extract data and construct match summary URLs
for idx, match in enumerate(matches[:3]):  # Limit to 3 matches for testing
    try:
        # Extract match ID for verification
        match_id_full = match.get_attribute('id')
        match_id = match_id_full.split('_')[-1] if match_id_full else 'Unknown_ID'

        # Extract match details
        home_team = match.find_element(By.CLASS_NAME, 'event__participant--home').text
        away_team = match.find_element(By.CLASS_NAME, 'event__participant--away').text
        home_score = match.find_element(By.CLASS_NAME, 'event__score--home').text
        away_score = match.find_element(By.CLASS_NAME, 'event__score--away').text

        # Extract match date
        try:
            parent_container = match.find_element(By.XPATH, './ancestor::div[contains(@class, "event__group")]')
            date_element = parent_container.find_element(By.CLASS_NAME, 'event__title--date')
            match_date_str = date_element.text.strip()
        except:
            match_date_str = 'Unknown Date'

        print(f"\nMatch {idx + 1}: {home_team} ({home_score}) vs {away_team} ({away_score}) on {match_date_str}")
        print(f"Extracted Match ID: {match_id}")

        # Construct match summary URL
        match_summary_url = f"https://www.flashscore.com.au/match/{match_id}/#/match-summary/match-summary"
        print(f"Match Summary URL: {match_summary_url}")

        # Open the match summary page in a new tab
        driver.execute_script(f"window.open('{match_summary_url}', '_blank');")
        driver.switch_to.window(driver.window_handles[1])

        # Wait for Pre-match odds to load
        try:
            wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'oddsRow')))
            odds_rows = driver.find_elements(By.CLASS_NAME, 'oddsRow')

            bet365_odds = 'N/A'
            for row in odds_rows:
                bookmaker_element = row.find_element(By.CLASS_NAME, 'bookmaker').find_element(By.TAG_NAME, 'a')
                bookmaker_name = bookmaker_element.get_attribute('title')

                if bookmaker_name.lower() == 'bet365':
                    home_odds = row.find_element(By.XPATH, './/span[@class="oddsType" and text()="1"]/following-sibling::span/span[@class="oddsValueInner"]').text
                    away_odds = row.find_element(By.XPATH, './/span[@class="oddsType" and text()="2"]/following-sibling::span/span[@class="oddsValueInner"]').text
                    bet365_odds = f"Home {home_odds}, Away {away_odds}"
                    break  # Stop after finding bet365 odds

        except Exception as e:
            print(f"Odds rows did not load for match {idx + 1}: {e}")
            bet365_odds = 'N/A'

        # Close the match summary tab and switch back to the main results page
        driver.close()
        driver.switch_to.window(driver.window_handles[0])

        # Append the data
        data.append({
            'Date': match_date_str,
            'Match ID': match_id,
            'Home Team': home_team,
            'Away Team': away_team,
            'Home Score': home_score,
            'Away Score': away_score,
            'bet365 Odds': bet365_odds
        })

    except Exception as e:
        print(f"Error extracting data for match {idx + 1}: {e}")
        driver.switch_to.window(driver.window_handles[0])  # Ensure it switches back to the main tab

# Save to CSV
df = pd.DataFrame(data)
df.to_csv('nba_bet365_odds.csv', index=False)
print(df)

# Close the browser
driver.quit()
